#user  nobody;
 
#指定nginx进程数
worker_processes  1;

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;
 
events {
 
    # 连接数上限
    worker_connections  1024;
 
}
 
#设定http服务器，利用它的反向代理功能提供负载均衡支持
 
http {
 
    #设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
    #设定日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
 
    #使用哪种格式的日志
    #access_log  logs/access.log  main;
    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，    
    sendfile        on;
    #tcp_nopush     on;
 
    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
 
    #开启gzip压缩 ，压缩html
    #gzip  on;
	
    #设定负载均衡的服务器列表 支持多组的负载均衡,可以配置多个upstream  来服务于不同的Server.
    #nginx 的 upstream 支持 几 种方式的分配
    #1)、轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
    #2)、weight 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 跟上面样，指定了权重。
    #3)、ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 
    #4)、fair      
    #5)、url_hash #Urlhash
 
    upstream mysvr {
 
      #weigth参数表示权值，权值越高被分配到的几率越大   
      #1.down 表示单前的server暂时不参与负载
      #2.weight 默认为1.weight越大，负载的权重就越大。     
      #3.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。  
      #server 192.168.1.116  down;
      #server 192.168.1.116  backup;
 
      server 192.168.1.121  weight=1;
      server 192.168.1.122  weight=2;
 
    }
    #配置代理服务器的地址，即Nginx安装的服务器地址、监听端口、默认地址
 
    server {
 
        #1.侦听80端口
        listen       80;
        #对于server_name,如果需要将多个域名的请求进行反向代理，可以配置多个server_name来满足要
        server_name  localhost;
		
        location / {
            # 这里需要改成你本地的前端代码目录
            root html/browser;
            index index.html;
        }
		
		location /springbootwar {
            add_header From nicefish;
            proxy_pass http://localhost:8080/springboot-war;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header Remote_Addr $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Cookie $http_cookie;
            proxy_redirect default;
            proxy_buffering off;
            proxy_cookie_path ~*^/.* /;
            proxy_intercept_errors on;
        }
		
		location ~ \.(html|js|css|png|jpg|jpeg|gif|ico|json|woff2|eot|ttf|svg|woff)$ {
        # 这里需要改成你本地的前端代码目录
        root html/browser;
    }
 
 
    }
 
    # another virtual host using mix of IP-, name-, and port-based configuration
 
}